[
  {
    "projectId": "a6ed8387-2780-433b-8779-8437bf0de411",
    "testId": "d2fb7611-ad2b-42ba-9c9e-ff36ec478252",
    "userId": "84f86458-30c1-7001-169f-7ce60ce6c2e0",
    "title": "TC001-authentication api user login",
    "description": "Test the /login endpoint to verify user login functionality with valid and invalid credentials, ensuring secure authentication and session management.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nLOGIN_ENDPOINT = f\"{BASE_URL}/login\"\nTIMEOUT = 30\n\ndef test_authentication_api_user_login():\n    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n    }\n\n    # Valid credentials test (assuming test user exists: username=testuser, password=testpass)\n    valid_payload = {\n        \"username\": \"testuser\",\n        \"password\": \"testpass\"\n    }\n    try:\n        response = requests.post(LOGIN_ENDPOINT, data=valid_payload, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected 200 for valid login, got {response.status_code}\"\n        # Assuming response contains JSON with auth token/session info\n        json_response = response.json()\n        assert \"token\" in json_response or \"session_id\" in json_response, \"Authentication token/session not found in response\"\n    except requests.RequestException as e:\n        assert False, f\"RequestException on valid login: {e}\"\n\n    # Invalid credentials test\n    invalid_payload = {\n        \"username\": \"invaliduser\",\n        \"password\": \"wrongpassword\"\n    }\n    try:\n        response = requests.post(LOGIN_ENDPOINT, data=invalid_payload, headers=headers, timeout=TIMEOUT)\n        # Expecting unauthorized or bad request, typically 401 or 400\n        assert response.status_code in (400, 401), f\"Expected 400 or 401 for invalid login, got {response.status_code}\"\n        # Response may contain an error message\n        json_response = response.json()\n        assert \"error\" in json_response or \"message\" in json_response, \"Error message not found in invalid login response\"\n    except requests.RequestException as e:\n        assert False, f\"RequestException on invalid login: {e}\"\n\ntest_authentication_api_user_login()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 41, in <module>\n  File \"<string>\", line 19, in test_authentication_api_user_login\nAssertionError: Expected 200 for valid login, got 422\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T20:11:01.706Z",
    "modified": "2025-10-05T20:11:41.775Z"
  },
  {
    "projectId": "a6ed8387-2780-433b-8779-8437bf0de411",
    "testId": "d2df3599-d353-4aa5-958e-a8475873d4d8",
    "userId": "84f86458-30c1-7001-169f-7ce60ce6c2e0",
    "title": "TC002-authentication api user logout",
    "description": "Test the /logout endpoint to verify user logout functionality, ensuring session termination and access revocation.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_authentication_api_user_logout():\n    session = requests.Session()\n    try:\n        # First, login to get a valid session or token for logout\n        login_url = f\"{BASE_URL}/login\"\n        login_data = {\n            \"username\": \"testuser\",\n            \"password\": \"testpassword\"\n        }\n        headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n        login_response = session.post(login_url, data=login_data, headers=headers, timeout=TIMEOUT)\n        assert login_response.status_code == 200, f\"Login failed with status code {login_response.status_code}\"\n        # Assuming successful login returns a session cookie or token in headers/cookies\n\n        # Now call logout endpoint\n        logout_url = f\"{BASE_URL}/logout\"\n        logout_response = session.post(logout_url, timeout=TIMEOUT)\n        assert logout_response.status_code == 200 or logout_response.status_code == 204, \\\n            f\"Logout failed with status code {logout_response.status_code}\"\n\n        # After logout, verify session termination by accessing a protected resource\n        dashboard_url = f\"{BASE_URL}/dashboard\"\n        dashboard_response = session.get(dashboard_url, timeout=TIMEOUT)\n        # Expect unauthorized or forbidden after logout (commonly 401 or 403)\n        assert dashboard_response.status_code in {401, 403}, \\\n            f\"Access after logout not revoked, status code: {dashboard_response.status_code}\"\n\n    except requests.RequestException as e:\n        assert False, f\"RequestException occurred: {e}\"\n\ntest_authentication_api_user_logout()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 36, in <module>\n  File \"<string>\", line 17, in test_authentication_api_user_logout\nAssertionError: Login failed with status code 422\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T20:11:01.711Z",
    "modified": "2025-10-05T20:11:57.207Z"
  },
  {
    "projectId": "a6ed8387-2780-433b-8779-8437bf0de411",
    "testId": "ae8b2747-e455-4919-be6c-afeab336b3c5",
    "userId": "84f86458-30c1-7001-169f-7ce60ce6c2e0",
    "title": "TC003-patient management api create new patient",
    "description": "Test the POST /patients endpoint to create a new patient with valid and invalid data, verifying data validation and persistence.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_patient_management_api_create_new_patient():\n    # Removed Content-Type header to allow requests to send as form data\n    \n    # Valid patient data\n    valid_patient_data = {\n        \"name\": f\"Test Patient {uuid.uuid4()}\",\n        \"age\": 30,\n        \"gender\": \"Male\"\n    }\n\n    # Invalid patient data samples\n    invalid_patient_data_cases = [\n        # Missing name\n        {\n            \"age\": 30,\n            \"gender\": \"Male\"\n        },\n        # Missing age\n        {\n            \"name\": \"Missing Age Patient\",\n            \"gender\": \"Female\"\n        },\n        # Missing gender\n        {\n            \"name\": \"Missing Gender Patient\",\n            \"age\": 25\n        },\n        # Age as string\n        {\n            \"name\": \"Invalid Age Patient\",\n            \"age\": \"twenty\",\n            \"gender\": \"Male\"\n        },\n        # Gender as number\n        {\n            \"name\": \"Invalid Gender Patient\",\n            \"age\": 40,\n            \"gender\": 123\n        },\n        # Empty name\n        {\n            \"name\": \"\",\n            \"age\": 22,\n            \"gender\": \"Female\"\n        }\n    ]\n\n    created_patient_id = None\n\n    try:\n        # Test valid patient creation\n        response = requests.post(\n            f\"{BASE_URL}/patients\",\n            data=valid_patient_data,\n            timeout=TIMEOUT\n        )\n        assert response.status_code in [200, 201], f\"Expected 201 or 200, got {response.status_code}\"\n        resp_json = response.json()\n        assert \"id\" in resp_json, \"Response JSON missing 'id' for created patient\"\n        created_patient_id = resp_json[\"id\"]\n        assert resp_json.get(\"name\") == valid_patient_data[\"name\"], \"Created patient name mismatch\"\n        assert int(resp_json.get(\"age\")) == valid_patient_data[\"age\"], \"Created patient age mismatch\"\n        assert resp_json.get(\"gender\") == valid_patient_data[\"gender\"], \"Created patient gender mismatch\"\n\n        # Verify patient persistence via GET /patients/{id}\n        get_resp = requests.get(f\"{BASE_URL}/patients/{created_patient_id}\", timeout=TIMEOUT)\n        assert get_resp.status_code == 200, f\"Expected 200 from GET patient by id, got {get_resp.status_code}\"\n        get_data = get_resp.json()\n        assert get_data.get(\"name\") == valid_patient_data[\"name\"], \"Persisted patient name mismatch\"\n        assert int(get_data.get(\"age\")) == valid_patient_data[\"age\"], \"Persisted patient age mismatch\"\n        assert get_data.get(\"gender\") == valid_patient_data[\"gender\"], \"Persisted patient gender mismatch\"\n\n        # Test invalid patient data\n        for invalid_data in invalid_patient_data_cases:\n            invalid_response = requests.post(\n                f\"{BASE_URL}/patients\",\n                data=invalid_data,\n                timeout=TIMEOUT\n            )\n            assert 400 <= invalid_response.status_code < 500, \\\n                f\"Expected 4xx for invalid input, got {invalid_response.status_code}, data: {invalid_data}\"\n\n    finally:\n        # Clean up created patient if exists\n        if created_patient_id:\n            try:\n                del_resp = requests.delete(f\"{BASE_URL}/patients/{created_patient_id}\", timeout=TIMEOUT)\n                # Accept 200 OK or 204 No Content or 404 Not Found as success for delete\n                assert del_resp.status_code in [200, 204, 404], f\"Unexpected status code on patient delete: {del_resp.status_code}\"\n            except Exception:\n                pass\n\n\ntest_patient_management_api_create_new_patient()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 100, in <module>\n  File \"<string>\", line 63, in test_patient_management_api_create_new_patient\nAssertionError: Expected 201 or 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T20:11:01.718Z",
    "modified": "2025-10-05T20:12:03.443Z"
  },
  {
    "projectId": "a6ed8387-2780-433b-8779-8437bf0de411",
    "testId": "32f6bac0-ab3e-433a-962a-a1a4b58c5728",
    "userId": "84f86458-30c1-7001-169f-7ce60ce6c2e0",
    "title": "TC004-patient management api get patient by id",
    "description": "Test the GET /patients/{id} endpoint to retrieve patient details by ID, verifying correct data retrieval and error handling for invalid IDs.",
    "code": "import requests\nimport json\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\n\ndef test_patient_management_api_get_patient_by_id():\n    patient_data = {\n        \"name\": \"Test Patient TC004\",\n        \"age\": 30,\n        \"gender\": \"Male\"\n    }\n\n    created_patient_id = None\n\n    try:\n        # Create a new patient to get a valid patient_id\n        create_response = requests.post(\n            f\"{BASE_URL}/patients\",\n            data=patient_data,\n            timeout=TIMEOUT\n        )\n        assert create_response.status_code == 201, f\"Patient creation failed: {create_response.text}\"\n        created_patient = create_response.json()\n        assert \"id\" in created_patient, \"Created patient response missing id\"\n        created_patient_id = created_patient[\"id\"]\n\n        # Test GET /patients/{id} with valid ID\n        get_response = requests.get(\n            f\"{BASE_URL}/patients/{created_patient_id}\",\n            timeout=TIMEOUT\n        )\n        assert get_response.status_code == 200, f\"Failed to get patient by valid ID: {get_response.text}\"\n        patient = get_response.json()\n\n        # Validate the returned patient data matches what was created\n        assert patient[\"id\"] == created_patient_id, \"Patient ID mismatch\"\n        assert patient[\"name\"] == patient_data[\"name\"], \"Patient name mismatch\"\n        assert patient[\"age\"] == patient_data[\"age\"], \"Patient age mismatch\"\n        assert patient[\"gender\"] == patient_data[\"gender\"], \"Patient gender mismatch\"\n\n        # Test GET /patients/{id} with invalid ID (e.g., non-existent)\n        invalid_id = 999999999\n        invalid_response = requests.get(\n            f\"{BASE_URL}/patients/{invalid_id}\",\n            timeout=TIMEOUT\n        )\n        assert invalid_response.status_code in (400, 404), f\"Expected 400 or 404 for invalid ID, got {invalid_response.status_code}\"\n        # Optional: check error message content if JSON returned\n        try:\n            error_json = invalid_response.json()\n            assert \"error\" in error_json or \"message\" in error_json, \"Error response should contain error or message\"\n        except json.JSONDecodeError:\n            # If not JSON, pass\n            pass\n\n        # Test GET /patients/{id} with invalid format ID (e.g., string)\n        invalid_format_id = \"abc\"\n        invalid_format_response = requests.get(\n            f\"{BASE_URL}/patients/{invalid_format_id}\",\n            timeout=TIMEOUT\n        )\n        assert invalid_format_response.status_code in (400, 404), f\"Expected 400 or 404 for invalid format ID, got {invalid_format_response.status_code}\"\n        try:\n            error_json = invalid_format_response.json()\n            assert \"error\" in error_json or \"message\" in error_json, \"Error response should contain error or message\"\n        except json.JSONDecodeError:\n            pass\n\n    finally:\n        if created_patient_id is not None:\n            # Delete the created patient after test to clean up\n            try:\n                delete_response = requests.delete(\n                    f\"{BASE_URL}/patients/{created_patient_id}\",\n                    timeout=TIMEOUT\n                )\n                # Accept 200 OK or 204 No Content on successful delete\n                assert delete_response.status_code in (200, 204), f\"Failed to delete patient cleanup. Status code: {delete_response.status_code}\"\n            except Exception:\n                pass\n\n\ntest_patient_management_api_get_patient_by_id()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 85, in <module>\n  File \"<string>\", line 24, in test_patient_management_api_get_patient_by_id\nAssertionError: Patient creation failed: 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T20:11:01.733Z",
    "modified": "2025-10-05T20:11:41.769Z"
  },
  {
    "projectId": "a6ed8387-2780-433b-8779-8437bf0de411",
    "testId": "c663c201-4d24-41e0-b754-ef1d0a52264b",
    "userId": "84f86458-30c1-7001-169f-7ce60ce6c2e0",
    "title": "TC005-appointment management api create new appointment",
    "description": "Test the POST /appointments endpoint to schedule a new appointment with valid patient_id, doctor_id, and appointment_date, verifying data validation and storage.",
    "code": "import requests\nfrom datetime import date, timedelta\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef create_patient(name, age, gender):\n    payload = {\n        'name': name,\n        'age': age,\n        'gender': gender\n    }\n    response = requests.post(f\"{BASE_URL}/patients\", data=payload, timeout=TIMEOUT)\n    response.raise_for_status()\n    return response.json().get('id')\n\ndef delete_patient(patient_id):\n    # Assuming there's an endpoint to delete a patient: DELETE /patients/{id}\n    requests.delete(f\"{BASE_URL}/patients/{patient_id}\", timeout=TIMEOUT)\n\ndef create_doctor(name, role=\"doctor\", department=\"General\"):\n    payload = {\n        'name': name,\n        'role': role,\n        'department': department\n    }\n    response = requests.post(f\"{BASE_URL}/staff\", data=payload, timeout=TIMEOUT)\n    response.raise_for_status()\n    return response.json().get('id')\n\ndef delete_doctor(doctor_id):\n    # Assuming there's an endpoint to delete staff: DELETE /staff/{id}\n    requests.delete(f\"{BASE_URL}/staff/{doctor_id}\", timeout=TIMEOUT)\n\ndef test_create_new_appointment():\n    patient_id = None\n    doctor_id = None\n    appointment_id = None\n    try:\n        # Create patient\n        patient_id = create_patient(\"Test Patient\", 30, \"Male\")\n        assert patient_id is not None and isinstance(patient_id, int), \"Failed to create patient\"\n\n        # Create doctor (staff with role doctor)\n        doctor_id = create_doctor(\"Test Doctor\", role=\"doctor\", department=\"General\")\n        assert doctor_id is not None and isinstance(doctor_id, int), \"Failed to create doctor\"\n\n        # Prepare appointment date (tomorrow)\n        appointment_date = (date.today() + timedelta(days=1)).isoformat()\n\n        appointment_payload = {\n            'patient_id': patient_id,\n            'doctor_id': doctor_id,\n            'appointment_date': appointment_date\n        }\n\n        # Create appointment\n        response = requests.post(f\"{BASE_URL}/appointments\", data=appointment_payload, timeout=TIMEOUT)\n        assert response.status_code == 201 or response.status_code == 200, f\"Unexpected status code: {response.status_code}\"\n        \n        appointment_data = response.json()\n        assert appointment_data.get('id') is not None, \"Appointment ID missing in response\"\n        assert appointment_data.get('patient_id') == patient_id, \"Patient ID mismatch\"\n        assert appointment_data.get('doctor_id') == doctor_id, \"Doctor ID mismatch\"\n        assert appointment_data.get('appointment_date') == appointment_date, \"Appointment date mismatch\"\n        \n        appointment_id = appointment_data.get('id')\n\n        # Retrieve appointment list to verify storage\n        list_response = requests.get(f\"{BASE_URL}/appointments\", timeout=TIMEOUT)\n        assert list_response.status_code == 200, f\"Failed to get appointments list: {list_response.status_code}\"\n        appointments = list_response.json()\n        assert any(appt.get('id') == appointment_id for appt in appointments), \"Created appointment not found in list\"\n\n    finally:\n        # Cleanup appointment if deletion endpoint exists\n        if appointment_id is not None:\n            requests.delete(f\"{BASE_URL}/appointments/{appointment_id}\", timeout=TIMEOUT)\n        # Cleanup doctor\n        if doctor_id is not None:\n            delete_doctor(doctor_id)\n        # Cleanup patient\n        if patient_id is not None:\n            delete_patient(patient_id)\n\ntest_create_new_appointment()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 86, in <module>\n  File \"<string>\", line 41, in test_create_new_appointment\n  File \"<string>\", line 14, in create_patient\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:8000/patients\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T20:11:01.742Z",
    "modified": "2025-10-05T20:11:38.407Z"
  },
  {
    "projectId": "a6ed8387-2780-433b-8779-8437bf0de411",
    "testId": "96de5598-2a36-4928-ba89-2b1f1f4f249c",
    "userId": "84f86458-30c1-7001-169f-7ce60ce6c2e0",
    "title": "TC006-admission management api create new admission",
    "description": "Test the POST /admissions endpoint to admit a patient by assigning ward and bed, verifying data validation and admission process.",
    "code": "import requests\nimport datetime\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_admission_management_api_create_new_admission():\n    # Helper function to create patient\n    def create_patient():\n        patient_data = {\n            'name': 'Test Patient',\n            'age': 30,\n            'gender': 'Male'\n        }\n        resp = requests.post(f\"{BASE_URL}/patients\", data=patient_data, timeout=TIMEOUT)\n        resp.raise_for_status()\n        patient = resp.json()\n        assert 'id' in patient and isinstance(patient['id'], int)\n        return patient['id']\n\n    # Helper function to create ward\n    def create_ward():\n        ward_data = {\n            'name': 'Test Ward',\n            'capacity': 10,\n            'department': 'General'\n        }\n        resp = requests.post(f\"{BASE_URL}/wards\", data=ward_data, timeout=TIMEOUT)\n        resp.raise_for_status()\n        ward = resp.json()\n        assert 'id' in ward and isinstance(ward['id'], int)\n        return ward['id']\n\n    # Helper function to create bed\n    def create_bed(ward_id):\n        bed_data = {\n            'ward_id': ward_id,\n            'bed_number': 'B101',\n            'bed_type': 'General'\n        }\n        resp = requests.post(f\"{BASE_URL}/beds\", data=bed_data, timeout=TIMEOUT)\n        resp.raise_for_status()\n        bed = resp.json()\n        assert 'id' in bed and isinstance(bed['id'], int)\n        return bed['id']\n\n    # Helper function to delete admission\n    def delete_admission(admission_id):\n        try:\n            resp = requests.delete(f\"{BASE_URL}/admissions/{admission_id}\", timeout=TIMEOUT)\n            if resp.status_code not in (200, 204, 404):\n                resp.raise_for_status()\n        except Exception:\n            pass\n\n    # Helper function to delete patient\n    def delete_patient(patient_id):\n        try:\n            resp = requests.delete(f\"{BASE_URL}/patients/{patient_id}\", timeout=TIMEOUT)\n            if resp.status_code not in (200, 204, 404):\n                resp.raise_for_status()\n        except Exception:\n            pass\n\n    # Helper function to delete bed\n    def delete_bed(bed_id):\n        try:\n            resp = requests.delete(f\"{BASE_URL}/beds/{bed_id}\", timeout=TIMEOUT)\n            if resp.status_code not in (200, 204, 404):\n                resp.raise_for_status()\n        except Exception:\n            pass\n\n    # Helper function to delete ward\n    def delete_ward(ward_id):\n        try:\n            resp = requests.delete(f\"{BASE_URL}/wards/{ward_id}\", timeout=TIMEOUT)\n            if resp.status_code not in (200, 204, 404):\n                resp.raise_for_status()\n        except Exception:\n            pass\n\n    admission_id = None\n    patient_id = None\n    ward_id = None\n    bed_id = None\n\n    try:\n        # Create prerequisite resources\n        patient_id = create_patient()\n        ward_id = create_ward()\n        bed_id = create_bed(ward_id)\n\n        # Test creating admission with valid data\n        admission_data = {\n            'patient_id': patient_id,\n            'ward_id': ward_id,\n            'bed_id': bed_id\n        }\n        resp = requests.post(f\"{BASE_URL}/admissions\", data=admission_data, timeout=TIMEOUT)\n        assert resp.status_code == 201 or resp.status_code == 200\n        admission = resp.json()\n        assert 'id' in admission and isinstance(admission['id'], int)\n        admission_id = admission['id']\n        assert admission['patient_id'] == patient_id\n        assert admission['ward_id'] == ward_id\n        assert admission['bed_id'] == bed_id\n\n        # Test data validation: missing patient_id\n        invalid_data_missing_patient = {\n            'ward_id': ward_id,\n            'bed_id': bed_id\n        }\n        resp = requests.post(f\"{BASE_URL}/admissions\", data=invalid_data_missing_patient, timeout=TIMEOUT)\n        assert resp.status_code >= 400 and resp.status_code < 500\n\n        # Test data validation: invalid ward_id (string)\n        invalid_data_invalid_ward = {\n            'patient_id': patient_id,\n            'ward_id': 'invalid',\n            'bed_id': bed_id\n        }\n        resp = requests.post(f\"{BASE_URL}/admissions\", data=invalid_data_invalid_ward, timeout=TIMEOUT)\n        assert resp.status_code >= 400 and resp.status_code < 500\n\n        # Test data validation: invalid bed_id (negative integer)\n        invalid_data_invalid_bed = {\n            'patient_id': patient_id,\n            'ward_id': ward_id,\n            'bed_id': -1\n        }\n        resp = requests.post(f\"{BASE_URL}/admissions\", data=invalid_data_invalid_bed, timeout=TIMEOUT)\n        assert resp.status_code >= 400 and resp.status_code < 500\n\n    finally:\n        # Cleanup created admission, patient, bed, ward\n        if admission_id is not None:\n            delete_admission(admission_id)\n        if patient_id is not None:\n            delete_patient(patient_id)\n        if bed_id is not None:\n            delete_bed(bed_id)\n        if ward_id is not None:\n            delete_ward(ward_id)\n\ntest_admission_management_api_create_new_admission()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 90, in test_admission_management_api_create_new_admission\n  File \"<string>\", line 16, in create_patient\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:8000/patients\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T20:11:01.748Z",
    "modified": "2025-10-05T20:11:39.960Z"
  },
  {
    "projectId": "a6ed8387-2780-433b-8779-8437bf0de411",
    "testId": "16742349-ba4f-4eb2-a18c-70b60bfd6eaf",
    "userId": "84f86458-30c1-7001-169f-7ce60ce6c2e0",
    "title": "TC007-staff management api create new staff member",
    "description": "Test the POST /staff endpoint to add a new staff member with valid name, role, and department, verifying data validation and persistence.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_create_new_staff_member():\n    url = f\"{BASE_URL}/staff\"\n    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n    }\n    # Valid test data for creating a staff member\n    payload = {\n        \"name\": \"John Doe\",\n        \"role\": \"Nurse\",\n        \"department\": \"Emergency\"\n    }\n\n    try:\n        response = requests.post(url, data=payload, headers=headers, timeout=TIMEOUT)\n        # Assert response code 201 Created or 200 OK depending on API implementation\n        assert response.status_code in (200, 201), f\"Unexpected status code: {response.status_code}\"\n        # Validate response content type and JSON body\n        content_type = response.headers.get(\"Content-Type\", \"\")\n        assert \"application/json\" in content_type, f\"Unexpected content type: {content_type}\"\n\n        data = response.json()\n        # Validate that returned data contains expected fields and matches submitted data\n        assert \"id\" in data, \"Response JSON missing 'id' field\"\n        assert data[\"name\"] == payload[\"name\"], \"Name mismatch in response\"\n        assert data[\"role\"] == payload[\"role\"], \"Role mismatch in response\"\n        assert data[\"department\"] == payload[\"department\"], \"Department mismatch in response\"\n\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_create_new_staff_member()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 36, in <module>\n  File \"<string>\", line 21, in test_create_new_staff_member\nAssertionError: Unexpected status code: 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T20:11:01.754Z",
    "modified": "2025-10-05T20:11:43.670Z"
  },
  {
    "projectId": "a6ed8387-2780-433b-8779-8437bf0de411",
    "testId": "01cbd56a-f391-4157-8909-59ab2d1b91f4",
    "userId": "84f86458-30c1-7001-169f-7ce60ce6c2e0",
    "title": "TC008-billing api create new bill",
    "description": "Test the POST /bills endpoint to create a new bill for a patient with valid amount and description, verifying billing data accuracy and storage.",
    "code": "import requests\nimport datetime\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\nHEADERS = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n}\n\ndef create_patient():\n    url = f\"{BASE_URL}/patients\"\n    patient_data = {\n        \"name\": \"Test Patient Billing\",\n        \"age\": 30,\n        \"gender\": \"Other\"\n    }\n    resp = requests.post(url, data=patient_data, headers=HEADERS, timeout=TIMEOUT)\n    resp.raise_for_status()\n    patient = resp.json()\n    assert \"id\" in patient and isinstance(patient[\"id\"], int)\n    return patient[\"id\"]\n\ndef delete_patient(patient_id):\n    url = f\"{BASE_URL}/patients/{patient_id}\"\n    # Assuming DELETE endpoint exists for cleanup, otherwise skip\n    try:\n        resp = requests.delete(url, timeout=TIMEOUT)\n        # If delete is not implemented, it's ok to ignore failure\n    except Exception:\n        pass\n\ndef delete_bill(bill_id):\n    url = f\"{BASE_URL}/bills/{bill_id}\"\n    # Assuming DELETE endpoint exists for cleanup, otherwise skip\n    try:\n        resp = requests.delete(url, timeout=TIMEOUT)\n    except Exception:\n        pass\n\ndef test_billing_api_create_new_bill():\n    patient_id = None\n    bill_id = None\n    try:\n        # Step 1: Create a patient to bill against\n        patient_id = create_patient()\n\n        # Step 2: Post a new bill for this patient\n        url = f\"{BASE_URL}/bills\"\n        bill_data = {\n            \"patient_id\": patient_id,\n            \"amount\": 235.50,\n            \"description\": \"Consultation and lab tests\"\n        }\n        response = requests.post(url, data=bill_data, headers=HEADERS, timeout=TIMEOUT)\n        assert response.status_code == 201, f\"Expected status 201, got {response.status_code}\"\n        bill = response.json()\n        \n        # Validate the bill response has meaningful data and matches request\n        assert \"id\" in bill and isinstance(bill[\"id\"], int)\n        bill_id = bill[\"id\"]\n        assert bill[\"patient_id\"] == patient_id\n        assert abs(float(bill[\"amount\"]) - 235.50) < 0.01\n        assert bill[\"description\"] == \"Consultation and lab tests\"\n\n        # Step 3: Retrieve bill via GET /bills to verify storage\n        bills_get_resp = requests.get(f\"{BASE_URL}/bills\", timeout=TIMEOUT)\n        assert bills_get_resp.status_code == 200\n        bills_list = bills_get_resp.json()\n        assert any(b[\"id\"] == bill_id for b in bills_list), \"Created bill not found in bills list\"\n        \n    finally:\n        if bill_id is not None:\n            delete_bill(bill_id)\n        if patient_id is not None:\n            delete_patient(patient_id)\n\ntest_billing_api_create_new_bill()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 77, in <module>\n  File \"<string>\", line 45, in test_billing_api_create_new_bill\n  File \"<string>\", line 18, in create_patient\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:8000/patients\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T20:11:01.759Z",
    "modified": "2025-10-05T20:11:45.323Z"
  },
  {
    "projectId": "a6ed8387-2780-433b-8779-8437bf0de411",
    "testId": "58b29b96-1372-43e0-a878-d00ac9790994",
    "userId": "84f86458-30c1-7001-169f-7ce60ce6c2e0",
    "title": "TC009-pharmacy api add new medicine",
    "description": "Test the POST /pharmacy/medicines endpoint to add a new medicine with valid name, quantity, and expiry_date, verifying inventory update and validation.",
    "code": "import requests\nfrom datetime import datetime, timedelta\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_pharmacy_api_add_new_medicine():\n    headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n    # Prepare medicine data\n    medicine_data = {\n        'name': 'TestMedicineXYZ',\n        'quantity': 100,\n        'expiry_date': (datetime.now() + timedelta(days=365)).strftime('%Y-%m-%d')\n    }\n\n    medicine_id = None\n\n    try:\n        # Step 1: Add new medicine (POST)\n        response = requests.post(f\"{BASE_URL}/pharmacy/medicines\", data=medicine_data, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 201 or response.status_code == 200, f\"Expected status 200 or 201, got {response.status_code}\"\n        resp_json = response.json()\n        assert 'id' in resp_json, \"Response JSON does not contain medicine 'id'\"\n        medicine_id = resp_json['id']\n        assert resp_json['name'] == medicine_data['name'], \"Medicine name mismatch in response\"\n        assert resp_json['quantity'] == medicine_data['quantity'], \"Medicine quantity mismatch in response\"\n        assert resp_json['expiry_date'] == medicine_data['expiry_date'], \"Medicine expiry_date mismatch in response\"\n\n        # Step 2: Verify inventory update by fetching the medicine list\n        get_response = requests.get(f\"{BASE_URL}/pharmacy/medicines\", timeout=TIMEOUT)\n        assert get_response.status_code == 200, f\"Failed to get medicines list, status code {get_response.status_code}\"\n        medicines = get_response.json()\n        # Ensure the added medicine is in the list\n        filtered = [m for m in medicines if m.get('id') == medicine_id]\n        assert len(filtered) == 1, \"Added medicine not found in the inventory list\"\n        found_medicine = filtered[0]\n        assert found_medicine['name'] == medicine_data['name'], \"Inventory name mismatch\"\n        assert found_medicine['quantity'] == medicine_data['quantity'], \"Inventory quantity mismatch\"\n        assert found_medicine['expiry_date'] == medicine_data['expiry_date'], \"Inventory expiry_date mismatch\"\n\n        # Step 3: Test validation: try adding medicine with missing fields or invalid data\n        invalid_payloads = [\n            {},  # empty\n            {'name': '', 'quantity': 10, 'expiry_date': '2030-01-01'},  # empty name\n            {'name': 'InvalidMed', 'quantity': -5, 'expiry_date': '2030-01-01'},  # negative quantity\n            {'name': 'InvalidMed', 'quantity': 10, 'expiry_date': 'invalid-date'},  # invalid date format\n            {'name': 'InvalidMed', 'quantity': 10}  # missing expiry_date\n        ]\n        for payload in invalid_payloads:\n            err_resp = requests.post(f\"{BASE_URL}/pharmacy/medicines\", data=payload, headers=headers, timeout=TIMEOUT)\n            assert err_resp.status_code == 400 or err_resp.status_code == 422, f\"Expected client error for payload {payload}, got {err_resp.status_code}\"\n\n    finally:\n        # Clean up: delete the newly added medicine if applicable\n        if medicine_id:\n            try:\n                del_resp = requests.delete(f\"{BASE_URL}/pharmacy/medicines/{medicine_id}\", timeout=TIMEOUT)\n                # Accept 200, 204, or 404 if already deleted\n                assert del_resp.status_code in [200, 204, 404], f\"Failed to delete medicine, status {del_resp.status_code}\"\n            except Exception:\n                pass\n\ntest_pharmacy_api_add_new_medicine()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 65, in <module>\n  File \"<string>\", line 23, in test_pharmacy_api_add_new_medicine\nAssertionError: Expected status 200 or 201, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T20:11:01.764Z",
    "modified": "2025-10-05T20:11:48.333Z"
  },
  {
    "projectId": "a6ed8387-2780-433b-8779-8437bf0de411",
    "testId": "be58b138-73ab-484d-be2c-4d91c101a5dd",
    "userId": "84f86458-30c1-7001-169f-7ce60ce6c2e0",
    "title": "TC010-surgery api schedule new surgery",
    "description": "Test the POST /surgeries endpoint to schedule a new surgery with valid patient_id, surgeon_id, and surgery_date, verifying scheduling and data integrity.",
    "code": "import requests\nfrom datetime import datetime, timedelta\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n\n\ndef create_patient(name, age, gender):\n    data = {\"name\": name, \"age\": age, \"gender\": gender}\n    response = requests.post(f\"{BASE_URL}/patients\", data=data, headers=HEADERS, timeout=TIMEOUT)\n    response.raise_for_status()\n    return response.json()[\"id\"]\n\n\ndef delete_patient(patient_id):\n    requests.delete(f\"{BASE_URL}/patients/{patient_id}\", timeout=TIMEOUT)  # Assume DELETE available\n\n\ndef create_staff(name, role, department):\n    data = {\"name\": name, \"role\": role, \"department\": department}\n    response = requests.post(f\"{BASE_URL}/staff\", data=data, headers=HEADERS, timeout=TIMEOUT)\n    response.raise_for_status()\n    return response.json()[\"id\"]\n\n\ndef delete_staff(staff_id):\n    requests.delete(f\"{BASE_URL}/staff/{staff_id}\", timeout=TIMEOUT)  # Assume DELETE available\n\n\ndef delete_surgery(surgery_id):\n    requests.delete(f\"{BASE_URL}/surgeries/{surgery_id}\", timeout=TIMEOUT)  # Assume DELETE available\n\n\ndef test_schedule_new_surgery():\n    patient_id = None\n    surgeon_id = None\n    surgery_id = None\n    try:\n        # Create a patient to schedule surgery for\n        patient_id = create_patient(\"Test Patient Surgery\", 30, \"Other\")\n\n        # Create a staff member with role 'surgeon' (assuming role names are recognized)\n        surgeon_id = create_staff(\"Dr. Surgery\", \"surgeon\", \"Surgery Department\")\n\n        # Prepare surgery date (tomorrow)\n        surgery_date = (datetime.now() + timedelta(days=1)).date().isoformat()\n\n        # Schedule new surgery\n        surgery_data = {\n            \"patient_id\": patient_id,\n            \"surgeon_id\": surgeon_id,\n            \"surgery_date\": surgery_date\n        }\n        response = requests.post(f\"{BASE_URL}/surgeries\", data=surgery_data, headers=HEADERS, timeout=TIMEOUT)\n\n        # Validate response status and content\n        assert response.status_code == 201 or response.status_code == 200, f\"Unexpected status code: {response.status_code}\"\n        res_json = response.json()\n        assert \"id\" in res_json, \"Response missing surgery ID\"\n        surgery_id = res_json[\"id\"]\n\n        # Validate that the scheduled surgery data matches input\n        assert res_json.get(\"patient_id\") == patient_id, \"Patient ID mismatch\"\n        assert res_json.get(\"surgeon_id\") == surgeon_id, \"Surgeon ID mismatch\"\n        assert res_json.get(\"surgery_date\") == surgery_date, \"Surgery date mismatch\"\n\n        # Optionally, verify the surgery is retrievable and correct\n        get_resp = requests.get(f\"{BASE_URL}/surgeries/{surgery_id}\", timeout=TIMEOUT)\n        assert get_resp.status_code == 200, f\"Failed to retrieve scheduled surgery, status: {get_resp.status_code}\"\n        surgery_info = get_resp.json()\n        assert surgery_info.get(\"id\") == surgery_id, \"Retrieved surgery ID mismatch\"\n        assert surgery_info.get(\"patient_id\") == patient_id, \"Retrieved patient ID mismatch\"\n        assert surgery_info.get(\"surgeon_id\") == surgeon_id, \"Retrieved surgeon ID mismatch\"\n        assert surgery_info.get(\"surgery_date\") == surgery_date, \"Retrieved surgery date mismatch\"\n\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n    finally:\n        # Cleanup created resources to maintain test isolation\n        if surgery_id:\n            try:\n                delete_surgery(surgery_id)\n            except Exception:\n                pass\n        if patient_id:\n            try:\n                delete_patient(patient_id)\n            except Exception:\n                pass\n        if surgeon_id:\n            try:\n                delete_staff(surgeon_id)\n            except Exception:\n                pass\n\n\ntest_schedule_new_surgery()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 41, in test_schedule_new_surgery\n  File \"<string>\", line 12, in create_patient\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:8000/patients\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 98, in <module>\n  File \"<string>\", line 78, in test_schedule_new_surgery\nAssertionError: Request failed: 404 Client Error: Not Found for url: http://localhost:8000/patients\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T20:11:01.780Z",
    "modified": "2025-10-05T20:11:47.784Z"
  }
]
